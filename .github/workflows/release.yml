name: Build release on Master Push

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils p7zip-full

      - name: Extract version from modDesc.xml
        id: get_version
        run: |
          VERSION=$(xmllint --xpath "string(//modDesc/version)" modDesc.xml)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Detected version: $VERSION"

      - name: Get latest release
        id: get_latest
        uses: actions/github-script@v7
        with:
          script: |
            const latest = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            }).catch(() => null);
            return latest ? latest.data.tag_name : "";
          result-encoding: string

      - name: Check version bump
        run: |
          LATEST="${{ steps.get_latest.outputs.result }}"
          if [ "$LATEST" = "v${{ env.VERSION }}" ]; then
            echo "Version $LATEST already released. Please bump version in modDesc and update the changelog!"
            exit 1
          fi

      - name: Create archive with exclusions
        run: |
          7z a -tzip "${{ github.event.repository.name }}.zip" \
            -xr!*.cmd -xr!*.zip -xr!*.yml -xr!\$data \
            -xr!*.blend \
            -xr!.svn \
            -xr!.editorconfig \
            -xr!.git -xr!.github -xr!.gitattributes -xr!.gitignore \
            -xr!.mayaSwatches -xr!*.mel -xr!*.mb -xr!*.ma \
            -xr!substance \
            -xr!*.obj -xr!*.fbx -xr!*.txt -xr!*.md \
            -xr!*.png -xr!*.psd -xr!*.tga -xr!*.gim -xr!*.pdn \
            -xr!.idea -xr!.vscode \
            .

      - name: Create Git tag if not exists
        run: |
          TAG="v${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
          else
            echo "Creating tag $TAG..."
            git tag "$TAG" -f
            git push --tags
          fi

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Release v${{ env.VERSION }}"
          artifacts: |
            *.zip
